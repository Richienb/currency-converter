import React, {useState} from 'react';
import {useForm} from 'react-hook-form';
import useSWR from 'swr';

import {fetcher} from '../utils/fetcher';

import Wrapper from './wrapper';
import Label from './label';
import Input from './input';
import SelectAddon from './select-addon';
import Select from './select';
import ButtonGroup from './button-group';
import Button from './button';

const options = [
	{value: 'AUD', label: 'ðŸ‡¦ðŸ‡º Australian dollar'},
	{value: 'BRL', label: 'ðŸ‡§ðŸ‡· Brazilian real'},
	{value: 'BGN', label: 'ðŸ‡§ðŸ‡¬ Bulgarian lev'},
	{value: 'CAD', label: 'ðŸ‡¨ðŸ‡¦ Canadian dollar'},
	{value: 'CNY', label: 'ðŸ‡¨ðŸ‡³ Chinese yuan'},
	{value: 'HRK', label: 'ðŸ‡­ðŸ‡· Croatian kuna'},
	{value: 'CZK', label: 'ðŸ‡¨ðŸ‡¿ Czech koruna'},
	{value: 'DKK', label: 'ðŸ‡©ðŸ‡° Danish krone'},
	{value: 'EUR', label: 'ðŸ‡ªðŸ‡º Euro'},
	{value: 'USD', label: 'ðŸ‡ºðŸ‡¸ US dollar'},
	{value: 'HKD', label: 'ðŸ‡­ðŸ‡° Hong Kong dollar'},
	{value: 'HUF', label: 'ðŸ‡­ðŸ‡º Hungarian forint'},
	{value: 'ISK', label: 'ðŸ‡®ðŸ‡¸ Icelandic krona'},
	{value: 'INR', label: 'ðŸ‡®ðŸ‡³ Indian rupee'},
	{value: 'IDR', label: 'ðŸ‡®ðŸ‡© Indonesian rupiah'},
	{value: 'ILS', label: 'ðŸ‡®ðŸ‡± Israeli shekel'},
	{value: 'JPY', label: 'ðŸ‡¯ðŸ‡µ Japanese yen'},
	{value: 'NOK', label: 'ðŸ‡³ðŸ‡´ Norwegian krone'},
	{value: 'PLN', label: 'ðŸ‡µðŸ‡± Polish zloty'},
	{value: 'GBP', label: 'ðŸ‡¬ðŸ‡§ Pound sterling'},
	{value: 'RON', label: 'ðŸ‡·ðŸ‡´ Romanian leu'},
	{value: 'RUB', label: 'ðŸ‡·ðŸ‡º Russian rouble'},
	{value: 'KRW', label: 'ðŸ‡°ðŸ‡· South Korean won'},
	{value: 'MXN', label: 'ðŸ‡²ðŸ‡½ Mexican peso'},
	{value: 'MYR', label: 'ðŸ‡²ðŸ‡¾ Malaysian ringgit'},
	{value: 'NZD', label: 'ðŸ‡³ðŸ‡¿ New Zealand dollar'},
	{value: 'PHP', label: 'ðŸ‡µðŸ‡­ Philippine peso'},
	{value: 'SGD', label: 'ðŸ‡¸ðŸ‡¬ Singapore dollar'},
	{value: 'THB', label: 'ðŸ‡¹ðŸ‡­ Thai baht'},
	{value: 'ZAR', label: 'ðŸ‡¿ðŸ‡¦ South African rand'},
	{value: 'SEK', label: 'ðŸ‡¸ðŸ‡ª Swedish krona'},
	{value: 'CHF', label: 'ðŸ‡¨ðŸ‡­ Swiss franc'},
	{value: 'TRY', label: 'ðŸ‡¹ðŸ‡· Turkish lira'}
];

const Converter = () => {
	const {register, handleSubmit, reset, getValues, setValue} = useForm();
	const [result, setResult] = useState('');
	const {data, error} = useSWR('main', fetcher);

	const swap = () => {
		const values = getValues();

		if (values.to === undefined || values.from === undefined) {
			return;
		}

		setValue('from', values.to);
		setValue('to', values.from);
	};

	const onSubmit = async values => {
		// E.preventDefault();

		const {Cashify} = await import('cashify');
		const cashify = new Cashify({base: data.base, rates: data.rates});
		const result = cashify.convert(Number(values.amount), {from: values.from, to: values.to}).toFixed(3);

		setResult(`${values.amount} ${values.from} => ${result} ${values.to}`);

		if (error) {
			setResult(`Something went wrong: ${error}`);
		}
	};

	const resetState = () => {
		reset();
		setResult('');
	};

	return (
		<Wrapper>
			<form onSubmit={handleSubmit(onSubmit)}>
				<Label>
        Amount
					<Input ref={register({required: true})} type="number" min="1" step="any" pattern="[0-9]*" name="amount" placeholder="Amount"/>
				</Label>
				<Label>
        From
					<SelectAddon>
						<Select ref={register({required: true})} name="from">
							<option value="">Select</option>
							{options.map(el => (
								<option key={el.value} value={el.value}>{el.label}</option>
							))}
						</Select>
						<Button type="button" onClick={() => swap()}>ðŸ”ƒ</Button>
					</SelectAddon>
				</Label>
				<Label>
        To
					<Select ref={register({required: true})} name="to">
						<option value="">Select</option>
						{options.map(el => (
							<option key={el.value} value={el.value}>{el.label}</option>
						))}
					</Select>
				</Label>
				<ButtonGroup>
					<Button primary type="submit">
						Convert
					</Button>
					<Button
						reset type="reset" onClick={() => {
							resetState();
						}}
					>
						Reset
					</Button>
				</ButtonGroup>
				{result}
			</form>
		</Wrapper>
	);
};

export default Converter;
